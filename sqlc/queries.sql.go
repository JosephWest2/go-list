// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (user_id, value) VALUES ($1, $2) RETURNING id, user_id, value, foriegn
`

type CreateItemParams struct {
	UserID int32
	Value  string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem, arg.UserID, arg.Value)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Value,
		&i.Foriegn,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash) VALUES ($1, $2) RETURNING id, username, password_hash
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.PasswordHash)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const getItemsContaining = `-- name: GetItemsContaining :many
SELECT id, user_id, value, foriegn FROM items WHERE value LIKE '%' || $1 || '%' and user_id = $2
`

type GetItemsContainingParams struct {
	Column1 pgtype.Text
	UserID  int32
}

func (q *Queries) GetItemsContaining(ctx context.Context, arg GetItemsContainingParams) ([]Item, error) {
	rows, err := q.db.Query(ctx, getItemsContaining, arg.Column1, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Value,
			&i.Foriegn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, password_hash FROM users WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.PasswordHash)
	return i, err
}

const getUserItems = `-- name: GetUserItems :many
SELECT id, user_id, value, foriegn FROM items WHERE user_id = $1
`

func (q *Queries) GetUserItems(ctx context.Context, userID int32) ([]Item, error) {
	rows, err := q.db.Query(ctx, getUserItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Value,
			&i.Foriegn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
